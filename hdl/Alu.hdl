    // This file is part of www.nand2tetris.org
    // and the book "The Elements of Computing Systems"
    // by Nisan and Schocken, MIT Press.
    // File name: projects/2/ALU.hdl
    /**
    * ALU (Arithmetic Logic Unit):
    * Computes out = one of the following functions:
    *                0, 1, -1,
    *                x, y, !x, !y, -x, -y,
    *                x + 1, y + 1, x - 1, y - 1,
    *                x + y, x - y, y - x,
    *                x & y, x | y
    * on the 16-bit inputs x, y,
    * according to the input bits zx, nx, zy, ny, f, no.
    * In addition, computes the two output bits:
    * if (out == 0) zr = 1, else zr = 0
    * if (out < 0)  ng = 1, else ng = 0
    */
    // Implementation: Manipulates the x and y inputs
    // and operates on the resulting values, as follows:
    // if (zx == 1) sets x = 0        // 16-bit constant
    // if (nx == 1) sets x = !x       // bitwise not
    // if (zy == 1) sets y = 0        // 16-bit constant
    // if (ny == 1) sets y = !y       // bitwise not
    // if (f == 1)  sets out = x + y  // integer 2's complement addition
    // if (f == 0)  sets out = x & y  // bitwise and
    // if (no == 1) sets out = !out   // bitwise not

    CHIP ALU {
        IN  
            x[16], y[16],  // 16-bit inputs        
            zx, // zero the x input?
            nx, // negate the x input?
            zy, // zero the y input?
            ny, // negate the y input?
            f,  // compute (out = x + y) or (out = x & y)?
            no; // negate the out output?
        OUT 
            out[16], // 16-bit output
            zr,      // if (out == 0) equals 1, else 0
            ng;      // if (out < 0)  equals 1, else 0

        PARTS:
            // zero X
            Mux16(a=x, b[0..15]=false, sel=zx, out=afterZX);

            // negate X
            Not16(in=afterZX, out=notAfterZX);
            Mux16(a=afterZX, b=notAfterZX, sel=nx, out=finalX);

            // zero Y
            Mux16(a=y, b[0..15]=false, sel=zy, out=afterZY);

            // negate Y
            Not16(in=afterZY, out=notAfterZY);
            Mux16(a=afterZY, b=notAfterZY, sel=ny, out=finalY);

            // f
            Add16(a=finalX, b=finalY, out=addFinalXY);
            And16(a=finalX, b=finalY, out=andFinalXY);
            Mux16(a=andFinalXY, b=addFinalXY, sel=f, out=outF);

            // no
            Not16(in=outF, out=notOutF);
            Mux16(a=outF, b=notOutF, sel=no, out=output);
            
            // out
            And16(a[0..15]=true, b=output, out=out);

            // zr
            Or16(
                a=output,
                b[0]=false, 
                out[0]=b0, out[1]=b1, out[2]=b2, out[3]=b3, 
                out[4]=b4, out[5]=b5, out[6]=b6, out[7]=b7, 
                out[8]=b8, out[9]=b9, out[10]=b10, out[11]=b11, 
                out[12]=b12, out[13]=b13, out[14]=b14, out[15]=b15
            );

            Or8Way(in[0]=b0, in[1]=b1, in[2]=b2, in[3]=b3, in[4]=b4, in[5]=b5, in[6]=b6, in[7]=b7, out=or0To7);
            Or8Way(in[0]=b8, in[1]=b9, in[2]=b10, in[3]=b11, in[4]=b12, in[5]=b13, in[6]=b14, in[7]=b15, out=or8To15);
            Or(a=or0To7, b=or8To15, out=notZR);
            Not(in=notZR, out=zr);

            // ng
            And16(a=output, b=true, out[0..14]=discard, out[15]=ng);
        }